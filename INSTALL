#!/bin/bash
#
# INSTALL script for Customizer "old stable"
# This will make installation easier (#141).
#
# DO NOT USE if this script was not downloaded from GitHub!
#
# Copyright 2016 Mubiin Kimura 'clearkimura'
# Distributed under GNU GPL-2.0 license
# This script shall be distributed with source code of Customizer.
#
# REQUIRES: bash, sudo, apt, wget, tar, make, dpkg, coreutils
#
# USAGE: For each STEP, copy and paste commands, then press ENTER in
# the Terminal. Else download and run: chmod +x INSTALL && ./INSTALL
#

# FUNCTIONS FOR DIRECT ACTION:
function install_req {                                 ### STEP 1 ###
#####################################################################
sudo apt-get install git build-essential fakeroot make binutils g++ \
python python-dev python-qt4 pyqt4-dev-tools squashfs-tools \
xorriso x11-xserver-utils xserver-xephyr qemu-kvm dpkg-dev \
debhelper qt4-dev-tools qt4-linguist-tools \
--no-install-recommends
#####################################################################
}

function download_src {                                ### STEP 2 ###
#####################################################################
wget https://github.com/clearkimura/Customizer/archive/master.tar.gz
tar zxvf master.tar.gz
#####################################################################
}

function install_bin {                                 ### STEP 3 ###
#####################################################################
cd Customizer-master && make deb
cd && sudo dpkg --install customizer*.deb
#####################################################################
}

function uninstall {                                   ### PURGES ###
#####################################################################
sudo dpkg --purge customizer
#####################################################################
}

# FUNCTIONS FOR SUPPORT ACTION:
function clean {
    echo "Check files to clean..." && sleep 1
    if [ -f master.tar.gz -o -d Customizer-master ]
        then echo "Found in current directory: $PWD"
        else return 0
    fi
    echo "Matching files for deletion..."
    ls -1d ?ustomizer* master.tar.gz*
    echo "[!] User consent is required [y to confirm, else skip]"
    rm -I --verbose --recursive ?ustomizer* master.tar.gz*
}

function renew_sh {
    echo "Prepare to download script..." && sleep 1
    local -r FILE="$(basename $URLR1)"
    if [ -f "$FILE" ]
        then mv $FILE $NAME.sh.old && chmod -x $NAME.sh.old
        else echo "Existing file was not found, skip rename"
    fi
    echo "Download will start..."
    wget --no-verbose $URLR1
    if [ -f "$FILE" ]
        then chmod +x $FILE
        else echo "[!] File was not downloaded" && return 1
    fi
    echo "[!] Run ./INSTALL again to use new script"
}

# FUNCTIONS FOR CHOICE:
function choice_1 {
    echo "*** This will install dependencies and $NAME"
    install_req && download_src && install_bin
}

function choice_2 {
    echo "*** This will install $NAME only"
    uninstall && download_src && install_bin
}

function choice_3 {
    echo "*** This will uninstall $NAME"
    uninstall && clean
}

function choice_s {
    echo "*** This is only useful whenever the script had changes"
    echo "*** on GitHub. Else, do not misuse this choice."
    echo "Press any key to continue [^C to abort]" && read -n 1
    renew_sh
}

# FUNCTIONS FOR DISPLAY:
function show_msg {
    if [ "$KEY" != q ]
        then echo "Started INSTALL script"
             echo "Use this script for $HINT"
        else echo "Finished now" && sleep 1
    fi
}

function show_menu {
    echo && echo "What is your action?"
    echo " 1: i: New installation"
    echo "    s: Download new script, if any"
    echo " 2: r: Download source and reinstall"
    echo " 3: u: Uninstall"
}

# VARIABLES FOR GLOBAL USE:
declare KEY="0"
declare -r NAME="customizer"
declare -r HINT="Customizer \"old stable\""
declare -r REPO="clearkimura/Customizer"
declare -r URLR="https://raw.githubusercontent.com"
declare -r URLR1="$URLR/$REPO/master/INSTALL"

# BEGIN SCRIPT:
show_msg
while [ "$KEY" != q ]
do {
    show_menu
    echo -n "Type your choice [q to quit]: "
    read -n 1 KEY && echo
    case $KEY in
        1|i) choice_1 && KEY="q" ;;
        2|r) choice_2 && KEY="q" ;;
        3|u) choice_3 && KEY="q" ;;
        s) choice_s && KEY="q" ;;
        q) echo "Do nothing"; break ;;
        *) echo "[?] Unknown option" ;;
    esac
}
done
show_msg
